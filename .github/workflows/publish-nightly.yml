name: Publish-Nightly

on:
  workflow_dispatch:
    inputs:
      build-dependent:
        description: 'Should build dependent repositories? (true/false)'
        required: false
        default: false
  workflow_call:
    secrets:
      WORKFLOW_ACCESS_TOKEN:
        required: true
      ACTIONS_READ_ACCESS_TOKEN:
        required: true

env:
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  PROJECT_NAME: 'openponk-${{ github.event.repository.name }}'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VERSION: 'nightly'
  RUN_ID: ${{ github.run_id }}
  PHARO_VERSION: 12
  cache-name: zip-cache

jobs:
  
  build-win:
    runs-on: windows-latest
    env:
      PLATFORM: win
    name: 'Build Windows'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Prepare scripts directory
        run: md ci-scripts
      - name: Checkout scripts
        uses: actions/checkout@v4.2.2
        with:
          repository: OpenPonk/ci-scripts
          path: ci-scripts
      - name: Load SmalltalkCI environment
        uses: hpi-swa/setup-smalltalkCI@1.3.4
        id: smalltalkci
        with:
          smalltalk-image: Pharo64-${{ env.PHARO_VERSION }}
      - name: Prepare image and test
        run: smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-image }}
        shell: bash
        timeout-minutes: 20
      - name: Create zip
        run: ci-scripts/.github/scripts/build-win.ps1
        env: 
          ACTIONS_READ_ACCESS_TOKEN: ${{ secrets.ACTIONS_READ_ACCESS_TOKEN }}
      - name: Cache zip
        uses: actions/cache/save@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          enableCrossOsArchive: true

  build-linux:
    runs-on: ubuntu-latest
    env:
      PLATFORM: linux
    name: 'Build Linux'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Prepare scripts directory
        run: mkdir ci-scripts
      - name: Checkout scripts
        uses: actions/checkout@v4.2.2
        with:
          repository: OpenPonk/ci-scripts
          path: ci-scripts
      - name: Load SmalltalkCI environment
        uses: hpi-swa/setup-smalltalkCI@1.3.4
        id: smalltalkci
        with:
          smalltalk-image: Pharo64-${{ env.PHARO_VERSION }}
      - name: Prepare image and test
        run: smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-image }}
        shell: bash
        timeout-minutes: 12
      - name: Prepare zip script
        run: chmod u+x ci-scripts/.github/scripts/build-linux.sh
      - name: Create zip
        run: ci-scripts/.github/scripts/build-linux.sh
        env: 
          ACTIONS_READ_ACCESS_TOKEN: ${{ secrets.ACTIONS_READ_ACCESS_TOKEN }}
      - name: Cache zip
        uses: actions/cache/save@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip

  build-mac-intel:
    runs-on: macos-13
    env:
      PLATFORM: mac-intel
    name: 'Build Mac Intel'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Prepare scripts directory
        run: mkdir ci-scripts
      - name: Checkout scripts
        uses: actions/checkout@v4.2.2
        with:
          repository: OpenPonk/ci-scripts
          path: ci-scripts
      - name: Load SmalltalkCI environment
        uses: hpi-swa/setup-smalltalkCI@1.3.4
        id: smalltalkci
        with:
          smalltalk-image: Pharo64-${{ env.PHARO_VERSION }}
      - name: Prepare image and test
        run: smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-image }}
        shell: bash
        timeout-minutes: 12
      - name: Prepare zip script
        run: chmod u+x ci-scripts/.github/scripts/build-mac.sh
      - name: Create zip
        run: ci-scripts/.github/scripts/build-mac.sh
        env: 
          ACTIONS_READ_ACCESS_TOKEN: ${{ secrets.ACTIONS_READ_ACCESS_TOKEN }}
      - name: Cache zip
        uses: actions/cache/save@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip

  build-mac-m1:
    runs-on: macos-14
    env:
      PLATFORM: mac-m1
    name: 'Build Mac M1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Prepare scripts directory
        run: mkdir ci-scripts
      - name: Checkout scripts
        uses: actions/checkout@v4.2.2
        with:
          repository: OpenPonk/ci-scripts
          path: ci-scripts
      - name: Load SmalltalkCI environment
        uses: hpi-swa/setup-smalltalkCI@1.3.4
        id: smalltalkci
        with:
          smalltalk-image: Pharo64-${{ env.PHARO_VERSION }}
      - name: Prepare image and test
        run: smalltalkci -s ${{ steps.smalltalkci.outputs.smalltalk-image }}
        shell: bash
        timeout-minutes: 12
      - name: Prepare zip script
        run: chmod u+x ci-scripts/.github/scripts/build-mac.sh
      - name: Create zip
        run: ci-scripts/.github/scripts/build-mac.sh
        env: 
          ACTIONS_READ_ACCESS_TOKEN: ${{ secrets.ACTIONS_READ_ACCESS_TOKEN }}
      - name: Cache zip
        uses: actions/cache/save@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip

  check-cache-linux:
    needs: build-linux
    runs-on: ubuntu-latest
    name: 'Check Linux zip is created'
    env:     
      PLATFORM: linux
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Fail on cache miss
        if: steps.get-zip.outputs.cache-hit != 'true'
        run: exit 1

  check-cache-mac-intel:
    needs: build-mac-intel
    runs-on: ubuntu-latest
    name: 'Check Mac Intel zip is created'
    env:     
      PLATFORM: mac-intel
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Fail on cache miss
        if: steps.get-zip.outputs.cache-hit != 'true'
        run: exit 1

  check-cache-mac-m1:
    needs: build-mac-m1
    runs-on: ubuntu-latest
    name: 'Check Mac M1 zip is created'
    env:     
      PLATFORM: mac-m1
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Fail on cache miss
        if: steps.get-zip.outputs.cache-hit != 'true'
        run: exit 1

  check-cache-win:
    needs: build-win
    runs-on: ubuntu-latest
    name: 'Check Windows zip is created'
    env:     
      PLATFORM: win
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          enableCrossOsArchive: true
      - name: Fail on cache miss
        if: steps.get-zip.outputs.cache-hit != 'true'
        run: exit 1


  save-stats:
    needs: [check-cache-win, check-cache-linux, check-cache-mac-intel, check-cache-mac-m1]
    runs-on: ubuntu-latest
    name: 'Save dl stats of previous build'
    env:
      PLATFORM: linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Prepare scripts directory
        run: mkdir ci-scripts
      - name: Checkout scripts
        uses: actions/checkout@v4.2.2
        with:
          repository: OpenPonk/ci-scripts
          path: ci-scripts
      - name: Prepare save stats script
        run: chmod u+x ci-scripts/.github/scripts/save-stats.sh
      - name: Save dl stats of last nightly build
        run: ci-scripts/.github/scripts/save-stats.sh


  create-release:
    needs: save-stats
    runs-on: ubuntu-latest
    name: 'Re-create release'
    env:
      PLATFORM: linux
    steps:
      - name: Re-create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "nightly"
          prerelease: true
          title: "nightly"

  upload-zip-win:
    needs: create-release
    runs-on: ubuntu-latest
    name: 'Upload Windows zip'
    env:
      PLATFORM: win
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          enableCrossOsArchive: true
      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        with:
          tag_name: nightly
      - name: Upload zip
        id: upload-zip
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_content_type: application/zip

  upload-zip-linux:
    needs: create-release
    runs-on: ubuntu-latest
    name: 'Upload Linux zip'
    env:
      PLATFORM: linux
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        with:
          tag_name: nightly
      - name: Upload zip
        id: upload-zip
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_content_type: application/zip

  upload-zip-mac-intel:
    needs: create-release
    runs-on: ubuntu-latest
    name: 'Upload Mac Intel zip'
    env:
      PLATFORM: mac-intel
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        with:
          tag_name: nightly
      - name: Upload zip
        id: upload-zip
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_content_type: application/zip

  upload-zip-mac-m1:
    needs: create-release
    runs-on: ubuntu-latest
    name: 'Upload Mac M1 zip'
    env:
      PLATFORM: mac-m1
    steps:
      - name: Get zip from cache
        id: get-zip
        uses: actions/cache/restore@v4.1.2
        with:
          path: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          key: ${{ github.run_id }}-${{ github.run_number }}_${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
      - name: Get Release by Tag
        id: get_release_by_tag
        uses: jonfriesen/get-release-by-tag@v0.0.11
        with:
          tag_name: nightly
      - name: Upload zip
        id: upload-zip
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_name: ${{ env.PROJECT_NAME }}-${{ env.PLATFORM }}-${{ env.VERSION }}.zip
          asset_content_type: application/zip

  create-dependent-matrix:
    needs: [create-release]
    runs-on: ubuntu-latest
    name: 'Find dependent repositories'
    if: ${{ github.event_name == 'push' || contains(github.event.inputs.build-dependent || false, 'true') }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Check list of repositories exists
        id: check-file
        run: test -f ./.github/dependent-repositories.txt || exit 1
      - name: Create dependent build matrix
        id: set-matrix
        run: echo "::set-output name=matrix::`cat ./.github/dependent-repositories.txt | tr -d " \t\n\r"`"

  build-dependent:
    needs: [create-dependent-matrix]
    runs-on: ubuntu-latest
    name: 'Build dependent'
    if: ${{ contains(needs.create-dependent-matrix.outputs.matrix, '/') }}
    strategy:
      matrix: ${{fromJson(needs.create-dependent-matrix.outputs.matrix)}}
    steps:
      - name: Start ${{ matrix.repository }} build
        uses: benc-uk/workflow-dispatch@v1.2.4
        with:
          workflow: Nightly
          repo: ${{ matrix.repository }}
          ref: ${{ matrix.branch }}
          token: ${{ secrets.WORKFLOW_ACCESS_TOKEN }}
          inputs: '{ "build-dependent": "${{ matrix.build-dependent }}" }'
